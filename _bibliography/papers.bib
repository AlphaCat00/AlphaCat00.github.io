---
---

@inproceedings{micro23-lognic,
  abbr      = {MICRO},
  author    = {Zerui Guo and Jiaxin Lin and Yuebin Bai and Daehyeok Kim and Michael Swift and Aditya Akella and Ming Liu},
  title     = {LogNIC: A High-Level Performance Model for SmartNICs (To appear)},
  booktitle = {Proceedings of 56th IEEE/ACM International Symposium on Microarchitecture},
  abstract  = {
               SmartNICs have become an indispensable communication fabric and computing substrate in today’s data centers and enterprise clusters, providing in-network computing capabilities for traversed packets and benefiting a range of applications across the system stack. Building an efficient SmartNIC-assisted solution is generally non-trivial and tedious as it requires programmers to understand the SmartNIC architecture, refactor application logic to match the device’s capabilities and limitations, and correlate an application execution with traffic characteristics. A high-level SmartNIC performance model can decouple the underlying SmartNIC hardware device from its offloaded software implementations and execution contexts, thereby drastically simplifying and facilitating the development process. However, prior architectural models can hardly be applied due to their ineptness in dissecting the SmartNIC-offloaded program’s complexity, capturing the nondeterministic overlapping between computation and I/O, and perceiving diverse traffic profiles.
               <br/><br/>
               
               This paper presents the LogNIC model that systematically analyzes the performance characteristics of a SmartNIC-offloaded program. Unlike conventional execution flow-based modeling, LogNIC employs a packet-centric approach that examines SmartNIC execution based on how packets traverse heterogeneous computing domains, on-/off-chip interconnects, and memory subsystems. It abstracts away the low-level device details, represents a deployed program as an execution graph, retains a handful of configurable parameters, and generates latency/throughput estimation for a given traffic profile. It further exposes a couple of extensions to handle multi-tenancy, traffic interleaving, and accelerator peculiarity. We demonstrate the LogNIC model’s capabilities using both commodity SmartNICs and an academic prototype under five application scenarios. Our evaluations show that LogNIC can estimate performance bounds, explore software optimization strategies, and provide guidelines for new hardware designs.
               },
  pdf       = {logNIC.pdf},
  month     = {{October}},
  year      = 2023,
  selected  = {true}
}


@inproceedings{sigcomm23-leed,
  abbr      = {SIGCOMM},
  title     = {LEED: A Low-Power, Fast Persistent Key-Value Store on SmartNIC JBOFs},
  author    = {Guo, Zerui and Zhang, Hua and Zhao, Chenxingyu and Bai, Yuebin and Swift, Michael and Liu, Ming},
  booktitle = {Proceedings of the ACM SIGCOMM 2023 Conference},
  abstract  = {
               The recent emergence of low-power high-throughput programmable storage platforms—SmartNIC JBOF (just-a-bunch-of-flash)—motivates us to rethink the cluster architecture and system stack for energy-efficient large-scale data-intensive workloads. Unlike conventional systems that use an array of server JBOFs or embedded storage nodes, the introduction of SmartNIC JBOFs has drastically changed the cluster compute, memory, and I/O configurations. Such an extremely imbalanced architecture makes prior system design philosophies and techniques either ineffective or invalid.
               <br/><br/>
               
               This paper presents LEED, a distributed, replicated, and persistent key-value store over an array of SmartNIC JBOFs. Our key ideas to tackle the unique challenges induced by a SmartNIC JBOF are: trading excessive I/O bandwidth for scarce SmartNIC core computing cycles and memory capacity; making scheduling decisions as early as possible to streamline the request execution flow. LEED systematically revamps the software stack and proposes techniques across per-SSD, intra-JBOF, and inter-JBOF levels. Our prototyped system based on Broadcom Stingray outperforms existing solutions that use beefy server JBOFs and wimpy embedded storage nodes by 4.2×/3.8× and 17.5×/19.1× in terms of requests per Joule for 256B/1KB key-value objects.
               },
  pdf       = {leed.pdf},
  talk      = {https://www.youtube.com/watch?v=oYJiODfhT50&list=PLU4C2_kotFP2JAkoL6pcgbb52f6GIJJd7&index=54},
  pages     = {1012--1027},
  year      = {2023},
  month     = {{September}},
  selected  = {true}
}
